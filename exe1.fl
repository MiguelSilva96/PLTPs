%option noyywrap
%{
#include <glib.h>
#include <string.h>
#include <ctype.h>
GSList* list;
GSList* iterator;
FILE *outV;
FILE *Contracoes;
%}

L           [a-z]|ú|ù|á|à|ç|é|è|õ|ó|ò|ã|ì|í
LM          [A-Z]|Ú|Ù|Á|À|Ç|É|È|Õ|Ó|Ò|Ã|Ì|Í
SU          i|you|he|she|it|we
OB          me|him|her|it|your|us|them
AV          how|then|more|also|here|there|still|never|when|really|back|just|by
A           a|an
P           the|this|this|those|these|that
O           not|[^a-z]
MV          can|could|shall|should|will|would|may|might
N           1|2|3|4|5|6|7|8|9|0
NE          one|two|three|four|five|six|seven|eight|nine
AU          did|Did|do|Do|does|Does
Q           all|some|several|enough|numerous|few
EXCEPTIONS  ({OB}|{SU}|{A}|{P}|{O}|{N}+|{NE}([a-z]+)?|{Q}|{AV})
%%

  Contracoes = fopen("Contracoes.txt", "w");
  int j, i = 0;
  char *token;
  char* args[10];


I/[\']m                          fprintf(Contracoes,"%s am",yytext);
{LM}?{L}+/[\']re                 fprintf(Contracoes,"%s are",yytext);
{LM}?{L}+/[\']s                  fprintf(Contracoes,"%s is/has",yytext);
{LM}?{L}+/[\']ve                 fprintf(Contracoes,"%s have",yytext);
{LM}?{L}+/[\']ll                 fprintf(Contracoes,"%s will",yytext);
{LM}?{L}+/[\']d                  fprintf(Contracoes,"%s had/would",yytext);
can't                            fprintf(Contracoes,"cannot");
won't                            fprintf(Contracoes,"will not");
shan't                           fprintf(Contracoes,"shall not");
{LM}?{L}+/n[\']t                 fprintf(Contracoes,"%s not",yytext);
to[\ ]{EXCEPTIONS}               {
                                 fprintf(Contracoes, "%s", yytext);
                                 }
to[\ ][a-z]+                     {
                                 list = g_slist_insert_sorted(list,
                                 strdup(yytext+3),
                                 (GCompareFunc)g_ascii_strcasecmp);
                                 fprintf(Contracoes, "%s", yytext);
                                 }
{MV}[\ ]{EXCEPTIONS}             {
                                 fprintf(Contracoes, "%s", yytext);
                                 }
{MV}[\ ][a-z]+                   {
                                 token = strdup(yytext);
                                 args[i] = strtok(token, " ");
                                 args[++i] = strtok(NULL, " ");
                                 list = g_slist_insert_sorted(list, args[1],
                                 (GCompareFunc)g_ascii_strcasecmp);
                                 i = 0;
                                 fprintf(Contracoes, "%s", yytext);
                                 }
{AU}[\ ][a-z]+[\ ]{EXCEPTIONS}   {
                                 fprintf(Contracoes, "%s", yytext);
                                 }
{AU}[\ ][a-z]+[\ ][a-z]+         {
                                 token = strdup(yytext);
                                 args[i] = strtok(token, " ");
                                 while(args[i] != NULL)
                                  args[++i] = strtok(NULL, " ");
                                 list = g_slist_insert_sorted(list, args[2],
                                 (GCompareFunc)g_ascii_strcasecmp);
                                 i = 0;
                                 fprintf(Contracoes, "%s", yytext);
                                 }
[a-z]?[\'][a-z]+                 {}
.|\n                             {fprintf(Contracoes, "%s", yytext);}

%%


int main (int argc, char* argv[]) {
    FILE *input;
    int z = 0;
    char *auxiliar = malloc(sizeof(char)*100), *aux;
    char format[128], search[128], book[64];
    char arrow[64], dict[256], pencil[64];
    char letter, ultima = ' ';
    strcpy(format, "<a onClick='oL(\"%c\")'><p> Letter %c%s </p></a>\n");
    strcpy(search, "<a href='%s%s'%s><i class='fa fa-search'></i></a></li>\n");
    strcpy(arrow, "<a><i class='fa fa-arrow-right'></i></a>");
    strcpy(dict, "https://dictionary.cambridge.org/dictionary/english/");
    strcpy(pencil, "<i class='fa fa-pencil'> </i>");
    strcpy(book, "<i class='fa fa-book'></i>");
    
    iterator = NULL;
    list  = NULL;
    input = fopen(argv[1], "r");
    outV  = fopen("verbos.html","w");
    Contracoes = fopen("Contracoes.txt", "w");
    yyin = input;
    yylex();

    fprintf(outV, "<!DOCTYPE html> <html> <head>\n");
    fprintf(outV, "<title> Ingles </title>\n");
    fprintf(outV, "<link rel='stylesheet' href='css/styles.css'>\n");
    fprintf(outV, "<link rel='stylesheet' href='css/fa/css/font-awesome.css'>\n");
    fprintf(outV, "<script src='js/script.js'></script>\n");
    fprintf(outV, "<meta charset='utf-8'/> </head> <body>\n");
    fprintf(outV, "<h1 class='bg-4 title'> Verbs %s</h1>\n",book);


    for (iterator = list; iterator; iterator = iterator->next) {
        
        if(strcmp(auxiliar,iterator->data) != 0) {
            aux = (char *)iterator->data;
            
            if(ultima != aux[0]) {
                fprintf(outV, "</ul>");
                letter = toupper(aux[0]);
                fprintf(outV, format, letter, letter, pencil);
                fprintf(outV, "<ul id='%c'>\n", letter);
                ultima = aux[0];
            }
            
            fprintf(outV, "<li> %s ", aux);
            fprintf(outV, "%s", arrow);
            fprintf(outV, search, dict, aux, "target='_blank'");
        }

        auxiliar = iterator->data;
    }
    fprintf(outV, "</body> </html>\n");
    return 0;
}
