%option noyywrap
%{
#include <glib.h>
#include <string.h>
#include <ctype.h>
GSList* list;
GSList* iterator;
FILE *outV;
FILE *Contracoes;
%}

L           [a-z]|ú|ù|á|à|ç|é|è|õ|ó|ò|ã|ì|í
LM          [A-Z]|Ú|Ù|Á|À|Ç|É|È|Õ|Ó|Ò|Ã|Ì|Í
SU          i|you|he|she|it|we
OB          me|him|her[s]?|it[s]?|your[s]?|us|them
PP          my|his|mine|their[s]?|our[s]?
AV          how|then|more|also|here|there|still|never|when|really|back|just|by
C	          for|and|nor|but|or|yet|so|if|after|before|even|in|once|now
CC	        only|until|while|when|where|thought|till|whe[a-z]+
RP	        that|which|who|whom|whose|whichever|who[a-z]+
A           a|an
DP          the|this|those|these
IP          any|most|none|both|many|several|anybody|anyone|anything|each
IPP         either|everbody|everyone|neither|nobody|nothing|some[a-z]+
O           not|[^a-z]|from|new|with
MV          [Cc]an['n]?|[Cc]ould[n't]?|[Ss]hall|[Ss]hant|[Ss]hould[n't]?|[Ww]ill|[Ww]on't|[Ww]ould[n't]?|[Mm]ay[n't]?|[Mm]ight[n't]?
N           1|2|3|4|5|6|7|8|9|0
NE          one|two|three|four|five|six|seven|eight|nine
AU          [Dd]id[n't]?|[Dd]o[n't]?|[Dd]oes[n't]?
Q           all|some|several|enough|numerous|few|another|same
T	          ([a-z]+[ijquv])|([a-z]+[rfz][fz])|([a-z]+(ing|ed|lly|[^s]s|es))
EXCEPTIONS  ({OB}|{SU}|{A}|{O}|{N}+|{NE}([a-z]+)?|{Q}|{AV}|{Q}|{C}|{CC}|{RP}|{DP}|{PP}|{IP}|{IPP}|{T})

%%

  Contracoes = fopen("Contracoes.txt", "w");
  int j, i = 0;
  char *token;
  char* args[10];


'm                                      fprintf(Contracoes, " am");
're                                     fprintf(Contracoes, " are");
's                                      fprintf(Contracoes, " is/has");
've                                     fprintf(Contracoes, " have");
'll                                     fprintf(Contracoes, " will");
'd                                      fprintf(Contracoes, " had/would");
can't                                   fprintf(Contracoes, "cannot");
won't                                   fprintf(Contracoes, "will not");
shan't                                  fprintf(Contracoes, "shall not");
{LM}?{L}+/n[\']t                        fprintf(Contracoes, "%s not", yytext);

[Tt]o[\ ]{EXCEPTIONS}            {
                                 fprintf(Contracoes, "%s", yytext);
                                 }
[Tt]o[\ ][a-z]+                  {
                                 list = g_slist_insert_sorted(list,
                                 strdup(yytext+3),
                                 (GCompareFunc)g_ascii_strcasecmp);
                                 fprintf(Contracoes, "%s", yytext);
                                 }
{MV}[\ ]{EXCEPTIONS}             {
                                 fprintf(Contracoes, "%s", yytext);
                                 }
{MV}[\ ][a-z]+                   {
                                 token = strdup(yytext);
                                 args[i] = strtok(token, " ");
                                 args[++i] = strtok(NULL, " ");
                                 list = g_slist_insert_sorted(list, args[1],
                                 (GCompareFunc)g_ascii_strcasecmp);
                                 i = 0;
                                 fprintf(Contracoes, "%s", yytext);
                                 }
{AU}[\ ][a-zA-Z]+[\ ]{EXCEPTIONS}   {
                                        fprintf(Contracoes, "%s", yytext);
                                    }
{AU}[\ ][a-zA-Z]+[\ ][a-z]+      {
                                 token = strdup(yytext);
                                 args[i] = strtok(token, " ");
                                 while(args[i] != NULL)
                                  args[++i] = strtok(NULL, " ");
                                 list = g_slist_insert_sorted(list, args[2],
                                 (GCompareFunc)g_ascii_strcasecmp);
                                 i = 0;
                                 fprintf(Contracoes, "%s", yytext);
                                 }
n[\']t                           {}
.|\n                             {fprintf(Contracoes, "%s", yytext);}

%%


int main (int argc, char* argv[]) {
    FILE *input;
    int z = 0;
    char *auxiliar = malloc(sizeof(char)*100), *aux;
    char format[128], search[128], book[64];
    char arrow[64], dict[256], pencil[64];
    char letter, ultima = ' ';
    strcpy(format, "<a onClick='oL(\"%c\")'><p> Letter %c%s </p></a>\n");
    strcpy(search, "<a href='%s%s'%s><i class='fa fa-search'></i></a></li>\n");
    strcpy(arrow, "<a><i class='fa fa-arrow-right'></i></a>");
    strcpy(dict, "https://dictionary.cambridge.org/dictionary/english/");
    strcpy(pencil, "<i class='fa fa-pencil'> </i>");
    strcpy(book, "<i class='fa fa-book'></i>");

    iterator = NULL;
    list  = NULL;
    input = fopen(argv[1], "r");
    outV  = fopen("verbos.html","w");
    Contracoes = fopen("Contracoes.txt", "w");
    yyin = input;
    yylex();

    fprintf(outV, "<!DOCTYPE html> <html> <head>\n");
    fprintf(outV, "<title> Ingles </title>\n");
    fprintf(outV, "<link rel='stylesheet' href='css/styles.css'>\n");
    fprintf(outV, "<link rel='stylesheet' href='css/fa/css/font-awesome.css'>\n");
    fprintf(outV, "<script src='js/script.js'></script>\n");
    fprintf(outV, "<meta charset='utf-8'/> </head> <body>\n");
    fprintf(outV, "<h1 class='bg-4 title'> Verbs %s</h1>\n",book);


    for (iterator = list; iterator; iterator = iterator->next) {

        if(strcmp(auxiliar,iterator->data) != 0) {
            aux = (char *)iterator->data;

            if(ultima != aux[0]) {
                fprintf(outV, "</ul>");
                letter = toupper(aux[0]);
                fprintf(outV, format, letter, letter, pencil);
                fprintf(outV, "<ul id='%c'>\n", letter);
                ultima = aux[0];
            }

            fprintf(outV, "<li> %s ", aux);
            fprintf(outV, "%s", arrow);
            fprintf(outV, search, dict, aux, "target='_blank'");
        }

        auxiliar = iterator->data;
    }
    fprintf(outV, "</body> </html>\n");
    return 0;
}
